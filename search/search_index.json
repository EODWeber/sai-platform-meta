{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Secure AI Platform \u2013 Meta Repository","text":"<p>Welcome to the Secure AI Platform (SAI Platform) documentation hub. This site is powered by MkDocs and serves as the single source of truth for all documentation, architecture, and governance resources that guide the Secure AI Platform project.</p>"},{"location":"#overview","title":"\ud83c\udf10 Overview","text":"<p>The Secure AI Platform is an open-source initiative that demonstrates how to build, deploy, and secure AI systems in a real-world, production-style environment. It combines modern MLOps practices with DevSecOps principles to showcase the secure design of AI infrastructure, APIs, and agents.</p> <p>This repository \u2014 <code>sai-platform-meta</code> \u2014 acts as the governance and documentation layer of the entire platform. It defines how each module is built, tested, secured, and documented.</p>"},{"location":"#what-youll-find-here","title":"\ud83e\udded What You\u2019ll Find Here","text":"Category Description Architecture High-level platform designs, diagrams, and specifications. Narrative Plain-language explanations, project stories, and educational write-ups. Technical In-depth engineering references, configuration notes, and security baselines. Workflows &amp; Templates Shared GitHub Actions, issue templates, and contribution standards."},{"location":"#platform-modules","title":"\ud83e\udde9 Platform Modules","text":"<p>Each major component of the Secure AI Platform lives in its own repository and integrates through shared standards defined here.</p> Module Purpose sai-platform-meta Central documentation, governance, CI/CD templates. sai-platform-infra Local and cluster infrastructure (Vault, Loki, Grafana, OTel, etc.). sai-ml-foundations Machine learning pipelines and experiment tracking. sai-inference-api Secure model serving API with JWT and RBAC. sai-agent-secops Secure AI agents and automation for SOC workflows. sai-adversarial-lab Adversarial testing, red teaming, and model robustness validation. sai-mlops-pipeline Central CI/CD, scanning, and signing pipelines. <p>For an architectural overview of how these modules connect, see Platform Overview.</p>"},{"location":"#getting-started-locally","title":"\u2699\ufe0f Getting Started Locally","text":"<p>You can set up the local environment entirely with Python \u2014 no system-level dependencies required.</p> <pre><code># Clone the repository\ngit clone https://github.com/EODWeber/sai-platform-meta.git\ncd sai-platform-meta\n\n# Set up local virtual environment and dependencies\nmake setup\n\n# Run all pre-commit checks\n. .venv/bin/activate\npre-commit run -a\n\n# Serve documentation locally\nmake docs\n</code></pre> <p>When you\u2019re ready, open <code>http://127.0.0.1:8000</code> in your browser to explore the site.</p>"},{"location":"#documentation-structure","title":"\ud83d\udee0 Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                 # You are here\n\u251c\u2500\u2500 architecture/            # Technical structure and diagrams\n\u2502   \u2514\u2500\u2500 PLATFORM_OVERVIEW.md\n\u251c\u2500\u2500 narrative/               # Project stories and accessible explanations\n\u2502   \u251c\u2500\u2500 PLATFORM_STORY.md\n\u2502   \u2514\u2500\u2500 REPO_STORY.md\n\u2514\u2500\u2500 tech/                    # Deep dives, baselines, and configuration notes\n</code></pre> <p>Each section can be read independently, or as part of the full story:</p> <ul> <li>Start with Platform Story for an accessible overview.</li> <li>Explore Architecture Overview for technical depth.</li> <li>Drill down into module-specific docs as they\u2019re added.</li> </ul>"},{"location":"#building-and-publishing-docs","title":"\ud83e\uddf1 Building and Publishing Docs","text":"<p>This site is built with MkDocs Material.</p> <pre><code># Serve locally\nmake docs\n\n# Build static site\n.venv/bin/mkdocs build\n</code></pre> <p>Docs are published automatically through GitHub Actions to:</p> <pre><code>https://&lt;your-username&gt;.github.io/sai-platform-meta/\n</code></pre> <p>If you\u2019re contributing or running locally, the only requirement is Python 3.11+.</p>"},{"location":"#contributing","title":"\ud83e\udde9 Contributing","text":"<p>This project follows a security-first and open documentation model. Before submitting changes:</p> <ol> <li>Run pre-commit run -a to lint and scan your code.</li> <li>Ensure documentation follows the existing format and voice.</li> <li>Include or update relevant architecture diagrams when adding new modules or workflows.</li> </ol>"},{"location":"#learn-more","title":"\ud83e\udde0 Learn More","text":"<ul> <li>Platform Story \u2013 High-level explanation in plain language.</li> <li>Architecture Overview \u2013 System structure and relationships.</li> <li>Meta Repo Story \u2013 Why this repository exists and how to use it.</li> </ul> <p>Secure AI Platform (SAI Platform) \u00a9 2025 Jeff Weber \u2014 Licensed under Apache 2.0</p>"},{"location":"architecture/PLATFORM_OVERVIEW/","title":"Secure AI Platform \u2014 Architectural Overview","text":"<p>Architectural definition of all modules, repos, and interconnections.</p>"},{"location":"architecture/PLATFORM_OVERVIEW/#platform-vision-goals","title":"Platform Vision &amp; Goals","text":"<p>The Secure AI Platform (SAI Platform) is a modular, production-style ecosystem designed to demonstrate secure-by-design AI engineering across the full lifecycle of machine learning and large language model systems.</p> <p>Vision: To build a reference architecture that unifies, AI, security, and operations, showcasing how a Staff/Principal-level AI Security Engineer would design, deploy, and defend an AI-driven platform.</p>"},{"location":"architecture/PLATFORM_OVERVIEW/#design-principles","title":"Design Principles","text":"<ul> <li>Security-first: Every component integrates identity, logging, secrets management, and compliance.</li> <li>Reproducibility: All pipelines, models, and deployments can be rebuilt deterministically.</li> <li>Transparency: Clear observability and auditability across systems.</li> <li>Modularity: Each function exists in its own repo, but integrates through shared infrastructure.</li> <li>Pragmatism: Built using open-source, self-hosted, and production-relevant technologies.</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#platform-modules","title":"Platform Modules","text":"Module Purpose Key Tech Repository Documentation &amp; Governance Program specifications, architecture, standards, and policies Markdown, GitHub Actions, MkDocs <code>sai-platform-meta</code> Platform Infrastructure Unified infrastructure: Vault, Caddy, Loki, Grafana, MLflow Docker Compose, Vault, Caddy, Grafana, Loki, OTel <code>sai-platform-infra</code> ML Foundations Core machine learning pipelines and datasets PyTorch, scikit-learn, MLflow <code>sai-ml-foundations</code> Inference API Secure model-serving API with JWT + RBAC FastAPI, Pydantic, PyTorch, MLflow SDK <code>sai-inference-api</code> Agent SecOps Secure LangChain agents for SOC automation LangChain, FastAPI, Vault, OTel <code>sai-agent-secops</code> Adversarial Lab Adversarial ML, red-teaming, and security tests Adversarial Robustness Toolbox, PyTorch, LLM Red Team tools <code>sai-adversarial-lab</code> MLOps Pipeline CI/CD, scanning, SBOMs, and release governance GitHub Actions, Trivy, Syft, OPA, Cosign <code>sai-mlops-pipeline</code>"},{"location":"architecture/PLATFORM_OVERVIEW/#repository-definitions","title":"Repository Definitions","text":""},{"location":"architecture/PLATFORM_OVERVIEW/#sai-platform-meta","title":"<code>sai-platform-meta</code>","text":"<p>Purpose: Acts as the control plane and governance layer for the entire platform.</p> <ul> <li>Contains program specifications, templates, CI/CD baselines, and policies.</li> <li>Source of truth for architecture, security, and observability standards.</li> <li>Provides reusable <code>.github/</code> workflows and <code>.dev/</code> scaffolds.</li> </ul> <p>Key Contents:</p> <ul> <li><code>/docs/</code> -&gt; specs, architecture, narratives</li> <li><code>.github/</code> -&gt; CI/CD and security automation templates</li> <li><code>.dev/</code> -&gt; pre-commit hooks, linting, make targets</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#sai-platform-infra","title":"<code>sai-platform-infra</code>","text":"<p>Purpose: Provides local infrastructure for all other services.</p> <ul> <li>Hosts Vault, Caddy, Loki, Grafana, and MLflow under Compose profiles.</li> <li>Exposes telemetry and secret-management endpoints for other repos.</li> </ul> <p>Key Technologies:</p> <ul> <li>Docker Compose (profiles: observability, secrets, registry, proxy)</li> <li>Caddy (reverse proxy), Loki/Grafana (logging &amp; metrics), Vault (secrets)</li> <li>OTel Collector (traces)</li> </ul> <p>Deliverables:</p> <ul> <li><code>docker-compose.yml</code>, <code>Caddyfile</code>, <code>otel-collector.yaml</code>, <code>vault-bootstrap.sh</code></li> <li><code>/docs/tech/runbook.md</code> (how to operate locally)</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#sai-ml-foundation","title":"<code>sai-ml-foundation</code>","text":"<p>Purpose: Reproducible, secure ML training pipelines.</p> <ul> <li>Demonstrates secure model development lifecycle.</li> <li>Integrates MLflow for experiment tracking.</li> <li>Documents dataset provenance and lineage.</li> </ul> <p>Key Technologies: PyTorch, scikit-learn, MLflow, pre-commit, ruff</p> <p>Deliverables:</p> <ul> <li><code>/src/</code> -&gt; model training &amp; evaluation</li> <li><code>/data/</code> -&gt; dataset cards &amp; manifests</li> <li><code>/docs/</code> -&gt; threat model, model cards, architecture</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#sai-inference-api","title":"<code>sai-inference-api</code>","text":"<p>Purpose: Securely serve ML models as APIs.</p> <ul> <li>Implements JWT authentication and RBAC.</li> <li>Logs inferences with correlation IDs for traceability.</li> <li>Integrates with OTel and the observability stack.</li> </ul> <p>Key Technologies: FastAPI, Uvicorn, PyTorch, Pydantic, JWT, OTel</p> <p>Deliverables:</p> <ul> <li><code>/src/</code> -&gt; API code</li> <li><code>/tests/</code> -&gt; security and functional tests</li> <li><code>/docs/</code> -&gt; OpenAPI spec, runbook, threat model</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#sai-agent-secops","title":"<code>sai-agent-secops</code>","text":"<p>Purpose: Build and secure LangChain agents for SOC automation.</p> <ul> <li>Enforces tool allowlists, RBAC, and policy-based prompt filtering.</li> <li>Integrates Vault for secret injection and audit logging.</li> <li>Provides auditability of prompt, tool, and result chains.</li> </ul> <p>Key Technologies: LangChain, FastAPI, Vault, OTel, RegexGuard</p> <p>Deliverables:</p> <ul> <li><code>/src/agent/</code> -&gt; core agent logic</li> <li><code>/src/security/</code> -&gt; guardrails &amp; filters</li> <li><code>/docs/</code> -&gt; security controls, chain visualization</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#sai-adversarial-lab","title":"<code>sai-adversarial-lab</code>","text":"<p>Purpose: Adversarial testing and AI red teaming.</p> <ul> <li>Tests model and agent resilience using adversarial attacks.</li> <li>Simulates prompt injections, jailbreaks, and data poisoning.</li> <li>Produces structured attack reports and metrics.</li> </ul> <p>Key Technologies: Adversarial Robustness Toolbox (ART), PyTorch, LangChain Red Team tools</p> <p>Deliverables:</p> <ul> <li><code>/attacks/</code> -&gt; attack harness</li> <li><code>/tests/</code> -&gt; regression and defense tests</li> <li><code>/reports/</code> -&gt; structured output</li> <li><code>/docs/tech/threat-model.md</code> -&gt; red team findings</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#sai-mlops-pipeline","title":"<code>sai-mlops-pipeline</code>","text":"<p>Purpose: Centralized CI/CD pipelines and policy enforcement.</p> <ul> <li>Provides reusable GitHub Actions workflows.</li> <li>Automates SBOM generation, container scanning, and artifact signing.</li> <li>Integrates OPA policies to enforce security gates.</li> </ul> <p>Key Technologies: GitHub Actions, Trivy, Syft, Cosign, OPA/Conftest</p> <p>Deliverables:</p> <ul> <li><code>.github/workflows/</code> -&gt; reusable CI/CD templates</li> <li><code>/policy/</code> -&gt; OPA policy bundles</li> <li><code>/docs/</code> -&gt; CI/CD standards and release governance</li> </ul>"},{"location":"architecture/PLATFORM_OVERVIEW/#security-compliance-foundations","title":"Security &amp; Compliance Foundations","text":"<p>Security Architecture Principles:</p> <ul> <li>Identity-first (JWT + RBAC on all APIs)</li> <li>Secrets in Vault only; short-lived tokens, no <code>.env</code> files committed</li> <li>SBOMs and signing enforced for every image (Trivy + Cosign)</li> <li>CI/CD policies enforced by OPA (fail closed)</li> <li>Static and dependency scanning (CodeQL, Dependabot)</li> </ul> <p>Threat Modeling: Each repo maintains <code>/docs/tech/threat-model.md</code> following a shared template. Platform-level threat models aggregate into: <code>/docs/architecture/THREAT_MODEL.md</code> within <code>sai-platform-meta</code>.</p>"},{"location":"architecture/PLATFORM_OVERVIEW/#observability-operations","title":"Observability &amp; Operations","text":"<p>Telemetry Standard: OpenTelemetry (OTel) is instrumented across every service.</p> Signal Collector Sink Logs Loki Grafana Loki UI Metrics Prometheus exporters -&gt; Grafana Dashboards Traces OTel Collector Grafana Tempo <p>Key Dashboards:</p> <ul> <li>API latency and inference errors</li> <li>Model accuracy vs drift</li> <li>Agent tool usage statistics</li> <li>Adversarial lab attack outcomes</li> </ul> <p>Runbook: <code>/docs/tech/runbook.md</code> in <code>sai-platform-infra</code> describes log/trace collection.</p>"},{"location":"architecture/PLATFORM_OVERVIEW/#integration-topology","title":"Integration Topology","text":"<p>Trust Zones:</p> <ul> <li><code>public</code> -&gt; API Gateway / Agent endpoints (JWT auth)</li> <li><code>internal</code> -&gt; MLflow, Vault, Observability, CI/CD</li> <li><code>secure</code> -&gt; Signing keys, OPA policies, SBOM registry</li> </ul> <p>Secrets Flow:</p> <ol> <li>Vault issues short-lived tokens for APIs and CI/CD.</li> <li>Services retrieve secrets dynamically via OIDC or AppRole.</li> <li>No static keys or <code>.env</code> files under version control.</li> </ol> <p>Network Summary:</p> Service Port Description Grafana 3000 Observability UI Loki 3100 Logs ingestion OTel Collector 4317 / 4318 Telemetry input Vault 8200 Secrets API Caddy 80 / 443 Reverse proxy"},{"location":"architecture/PLATFORM_OVERVIEW/#development-lifecycle","title":"Development Lifecycle","text":"<p>Flow Overview:</p> <p>Code -&gt; Lint/Test -&gt; SBOM -&gt; Scan -&gt; Sign -&gt; Deploy -&gt; Monitor -&gt; Feedback -&gt; Retrain</p> <p>Stages:</p> <ol> <li>Code &amp; Commit -&gt; pre-commit hooks enforce lint, typing, and secret scan.</li> <li>CI Build -&gt; SBOM generation (Syft) + scanning (Trivy).</li> <li>Policy Gate -&gt; OPA checks; fail if HIGH/CRITICAL unwaived.</li> <li>Sign &amp; Release -&gt; Cosign signature, Git tag, changelog update.</li> <li>Deploy -&gt; Compose or K8s.</li> <li>Monitor -&gt; OTel + Grafana dashboards.</li> <li>Feedback Loop -&gt; retraining, adversarial testing, or model updates.</li> </ol> <p>Versioning: Semantic (<code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>)</p>"},{"location":"architecture/PLATFORM_OVERVIEW/#future-expansion","title":"Future Expansion","text":"<p>Planned Enhancements:</p> <ul> <li>Containerized K8s Helm deployment</li> <li>SOC Integration: alert triage bot and LLM-driven response workflows</li> <li>Compliance-as-code via Open Policy Agent extensions</li> <li>Distributed tracing with Grafana Tempo</li> <li>Public documentation site via MkDocs or Docusaurus</li> </ul> <p>Long-term Goals:</p> <ul> <li>Demonstrate full AI security lifecycle: design -&gt; defense -&gt; detection -&gt; governance</li> <li>Publish the architecture as a public reference for secure MLOps.</li> </ul>"},{"location":"architecture/THREAT_MODEL/","title":"Threat Model","text":"<p>High-level platform threat model</p>"},{"location":"architecture/platform_overview/","title":"Secure AI Platform \u2014 Architectural Overview","text":"<p>Architectural definition of all modules, repos, and interconnections.</p>"},{"location":"architecture/platform_overview/#platform-vision-goals","title":"Platform Vision &amp; Goals","text":"<p>The Secure AI Platform (SAI Platform) is a modular, production-style ecosystem designed to demonstrate secure-by-design AI engineering across the full lifecycle of machine learning and large language model systems.</p> <p>Vision: To build a reference architecture that unifies, AI, security, and operations, showcasing how a Staff/Principal-level AI Security Engineer would design, deploy, and defend an AI-driven platform.</p>"},{"location":"architecture/platform_overview/#design-principles","title":"Design Principles","text":"<ul> <li>Security-first: Every component integrates identity, logging, secrets management, and compliance.</li> <li>Reproducibility: All pipelines, models, and deployments can be rebuilt deterministically.</li> <li>Transparency: Clear observability and auditability across systems.</li> <li>Modularity: Each function exists in its own repo, but integrates through shared infrastructure.</li> <li>Pragmatism: Built using open-source, self-hosted, and production-relevant technologies.</li> </ul>"},{"location":"architecture/platform_overview/#platform-modules","title":"Platform Modules","text":"Module Purpose Key Tech Repository Documentation &amp; Governance Program specifications, architecture, standards, and policies Markdown, GitHub Actions, MkDocs <code>sai-platform-meta</code> Platform Infrastructure Unified infrastructure: Vault, Caddy, Loki, Grafana, MLflow Docker Compose, Vault, Caddy, Grafana, Loki, OTel <code>sai-platform-infra</code> ML Foundations Core machine learning pipelines and datasets PyTorch, scikit-learn, MLflow <code>sai-ml-foundations</code> Inference API Secure model-serving API with JWT + RBAC FastAPI, Pydantic, PyTorch, MLflow SDK <code>sai-inference-api</code> Agent SecOps Secure LangChain agents for SOC automation LangChain, FastAPI, Vault, OTel <code>sai-agent-secops</code> Adversarial Lab Adversarial ML, red-teaming, and security tests Adversarial Robustness Toolbox, PyTorch, LLM Red Team tools <code>sai-adversarial-lab</code> MLOps Pipeline CI/CD, scanning, SBOMs, and release governance GitHub Actions, Trivy, Syft, OPA, Cosign <code>sai-mlops-pipeline</code>"},{"location":"architecture/platform_overview/#repository-definitions","title":"Repository Definitions","text":""},{"location":"architecture/platform_overview/#sai-platform-meta","title":"<code>sai-platform-meta</code>","text":"<p>Purpose: Acts as the control plane and governance layer for the entire platform.</p> <ul> <li>Contains program specifications, templates, CI/CD baselines, and policies.</li> <li>Source of truth for architecture, security, and observability standards.</li> <li>Provides reusable <code>.github/</code> workflows and <code>.dev/</code> scaffolds.</li> </ul> <p>Key Contents:</p> <ul> <li><code>/docs/</code> -&gt; specs, architecture, narratives</li> <li><code>.github/</code> -&gt; CI/CD and security automation templates</li> <li><code>.dev/</code> -&gt; pre-commit hooks, linting, make targets</li> </ul>"},{"location":"architecture/platform_overview/#sai-platform-infra","title":"<code>sai-platform-infra</code>","text":"<p>Purpose: Provides local infrastructure for all other services.</p> <ul> <li>Hosts Vault, Caddy, Loki, Grafana, and MLflow under Compose profiles.</li> <li>Exposes telemetry and secret-management endpoints for other repos.</li> </ul> <p>Key Technologies:</p> <ul> <li>Docker Compose (profiles: observability, secrets, registry, proxy)</li> <li>Caddy (reverse proxy), Loki/Grafana (logging &amp; metrics), Vault (secrets)</li> <li>OTel Collector (traces)</li> </ul> <p>Deliverables:</p> <ul> <li><code>docker-compose.yml</code>, <code>Caddyfile</code>, <code>otel-collector.yaml</code>, <code>vault-bootstrap.sh</code></li> <li><code>/docs/tech/runbook.md</code> (how to operate locally)</li> </ul>"},{"location":"architecture/platform_overview/#sai-ml-foundation","title":"<code>sai-ml-foundation</code>","text":"<p>Purpose: Reproducible, secure ML training pipelines.</p> <ul> <li>Demonstrates secure model development lifecycle.</li> <li>Integrates MLflow for experiment tracking.</li> <li>Documents dataset provenance and lineage.</li> </ul> <p>Key Technologies: PyTorch, scikit-learn, MLflow, pre-commit, ruff</p> <p>Deliverables:</p> <ul> <li><code>/src/</code> -&gt; model training &amp; evaluation</li> <li><code>/data/</code> -&gt; dataset cards &amp; manifests</li> <li><code>/docs/</code> -&gt; threat model, model cards, architecture</li> </ul>"},{"location":"architecture/platform_overview/#sai-inference-api","title":"<code>sai-inference-api</code>","text":"<p>Purpose: Securely serve ML models as APIs.</p> <ul> <li>Implements JWT authentication and RBAC.</li> <li>Logs inferences with correlation IDs for traceability.</li> <li>Integrates with OTel and the observability stack.</li> </ul> <p>Key Technologies: FastAPI, Uvicorn, PyTorch, Pydantic, JWT, OTel</p> <p>Deliverables:</p> <ul> <li><code>/src/</code> -&gt; API code</li> <li><code>/tests/</code> -&gt; security and functional tests</li> <li><code>/docs/</code> -&gt; OpenAPI spec, runbook, threat model</li> </ul>"},{"location":"architecture/platform_overview/#sai-agent-secops","title":"<code>sai-agent-secops</code>","text":"<p>Purpose: Build and secure LangChain agents for SOC automation.</p> <ul> <li>Enforces tool allowlists, RBAC, and policy-based prompt filtering.</li> <li>Integrates Vault for secret injection and audit logging.</li> <li>Provides auditability of prompt, tool, and result chains.</li> </ul> <p>Key Technologies: LangChain, FastAPI, Vault, OTel, RegexGuard</p> <p>Deliverables:</p> <ul> <li><code>/src/agent/</code> -&gt; core agent logic</li> <li><code>/src/security/</code> -&gt; guardrails &amp; filters</li> <li><code>/docs/</code> -&gt; security controls, chain visualization</li> </ul>"},{"location":"architecture/platform_overview/#sai-adversarial-lab","title":"<code>sai-adversarial-lab</code>","text":"<p>Purpose: Adversarial testing and AI red teaming.</p> <ul> <li>Tests model and agent resilience using adversarial attacks.</li> <li>Simulates prompt injections, jailbreaks, and data poisoning.</li> <li>Produces structured attack reports and metrics.</li> </ul> <p>Key Technologies: Adversarial Robustness Toolbox (ART), PyTorch, LangChain Red Team tools</p> <p>Deliverables:</p> <ul> <li><code>/attacks/</code> -&gt; attack harness</li> <li><code>/tests/</code> -&gt; regression and defense tests</li> <li><code>/reports/</code> -&gt; structured output</li> <li><code>/docs/tech/threat-model.md</code> -&gt; red team findings</li> </ul>"},{"location":"architecture/platform_overview/#sai-mlops-pipeline","title":"<code>sai-mlops-pipeline</code>","text":"<p>Purpose: Centralized CI/CD pipelines and policy enforcement.</p> <ul> <li>Provides reusable GitHub Actions workflows.</li> <li>Automates SBOM generation, container scanning, and artifact signing.</li> <li>Integrates OPA policies to enforce security gates.</li> </ul> <p>Key Technologies: GitHub Actions, Trivy, Syft, Cosign, OPA/Conftest</p> <p>Deliverables:</p> <ul> <li><code>.github/workflows/</code> -&gt; reusable CI/CD templates</li> <li><code>/policy/</code> -&gt; OPA policy bundles</li> <li><code>/docs/</code> -&gt; CI/CD standards and release governance</li> </ul>"},{"location":"architecture/platform_overview/#security-compliance-foundations","title":"Security &amp; Compliance Foundations","text":"<p>Security Architecture Principles:</p> <ul> <li>Identity-first (JWT + RBAC on all APIs)</li> <li>Secrets in Vault only; short-lived tokens, no <code>.env</code> files committed</li> <li>SBOMs and signing enforced for every image (Trivy + Cosign)</li> <li>CI/CD policies enforced by OPA (fail closed)</li> <li>Static and dependency scanning (CodeQL, Dependabot)</li> </ul> <p>Threat Modeling: Each repo maintains <code>/docs/tech/threat-model.md</code> following a shared template. Platform-level threat models aggregate into: <code>/docs/architecture/THREAT_MODEL.md</code> within <code>sai-platform-meta</code>.</p>"},{"location":"architecture/platform_overview/#observability-operations","title":"Observability &amp; Operations","text":"<p>Telemetry Standard: OpenTelemetry (OTel) is instrumented across every service.</p> Signal Collector Sink Logs Loki Grafana Loki UI Metrics Prometheus exporters -&gt; Grafana Dashboards Traces OTel Collector Grafana Tempo <p>Key Dashboards:</p> <ul> <li>API latency and inference errors</li> <li>Model accuracy vs drift</li> <li>Agent tool usage statistics</li> <li>Adversarial lab attack outcomes</li> </ul> <p>Runbook: <code>/docs/tech/runbook.md</code> in <code>sai-platform-infra</code> describes log/trace collection.</p>"},{"location":"architecture/platform_overview/#integration-topology","title":"Integration Topology","text":"<p>Trust Zones:</p> <ul> <li><code>public</code> -&gt; API Gateway / Agent endpoints (JWT auth)</li> <li><code>internal</code> -&gt; MLflow, Vault, Observability, CI/CD</li> <li><code>secure</code> -&gt; Signing keys, OPA policies, SBOM registry</li> </ul> <p>Secrets Flow:</p> <ol> <li>Vault issues short-lived tokens for APIs and CI/CD.</li> <li>Services retrieve secrets dynamically via OIDC or AppRole.</li> <li>No static keys or <code>.env</code> files under version control.</li> </ol> <p>Network Summary:</p> Service Port Description Grafana 3000 Observability UI Loki 3100 Logs ingestion OTel Collector 4317 / 4318 Telemetry input Vault 8200 Secrets API Caddy 80 / 443 Reverse proxy"},{"location":"architecture/platform_overview/#development-lifecycle","title":"Development Lifecycle","text":"<p>Flow Overview:</p> <p>Code -&gt; Lint/Test -&gt; SBOM -&gt; Scan -&gt; Sign -&gt; Deploy -&gt; Monitor -&gt; Feedback -&gt; Retrain</p> <p>Stages:</p> <ol> <li>Code &amp; Commit -&gt; pre-commit hooks enforce lint, typing, and secret scan.</li> <li>CI Build -&gt; SBOM generation (Syft) + scanning (Trivy).</li> <li>Policy Gate -&gt; OPA checks; fail if HIGH/CRITICAL unwaived.</li> <li>Sign &amp; Release -&gt; Cosign signature, Git tag, changelog update.</li> <li>Deploy -&gt; Compose or K8s.</li> <li>Monitor -&gt; OTel + Grafana dashboards.</li> <li>Feedback Loop -&gt; retraining, adversarial testing, or model updates.</li> </ol> <p>Versioning: Semantic (<code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>)</p>"},{"location":"architecture/platform_overview/#future-expansion","title":"Future Expansion","text":"<p>Planned Enhancements:</p> <ul> <li>Containerized K8s Helm deployment</li> <li>SOC Integration: alert triage bot and LLM-driven response workflows</li> <li>Compliance-as-code via Open Policy Agent extensions</li> <li>Distributed tracing with Grafana Tempo</li> <li>Public documentation site via MkDocs or Docusaurus</li> </ul> <p>Long-term Goals:</p> <ul> <li>Demonstrate full AI security lifecycle: design -&gt; defense -&gt; detection -&gt; governance</li> <li>Publish the architecture as a public reference for secure MLOps.</li> </ul>"},{"location":"architecture/threat_model/","title":"Threat Model","text":"<p>High-level platform threat model</p>"},{"location":"narrative/","title":"Overview","text":""},{"location":"narrative/platform_story/","title":"Secure AI Platform","text":"<p>The Secure AI Platform is a hands-on project that explores how to design, build, and operate artificial intelligence systems securely. It focuses on both the technical and practical sides of AI engineering\u2014from creating models and APIs to securing the infrastructure, monitoring performance, and defending against attacks. The platform is organized into focused modules that each represent a piece of the full AI security lifecycle.</p> <p>The goal is simple: to show how AI systems can be made trustworthy, resilient, and transparent by combining machine learning engineering with security best practices. Each part of the project builds on the others, creating a realistic example of what a secure AI platform might look like in production.</p>"},{"location":"narrative/platform_story/#understanding-the-platform","title":"Understanding the Platform","text":"<p>The Secure AI Platform is designed as a collection of smaller projects that connect to form one complete system. Each module focuses on a specific part of building, deploying, or securing AI systems, from the foundation infrastructure to automated security testing and continuous delivery.</p> <p>Together, these modules form an educational yet realistic framework that mirrors what you might see in a professional environment. The repositories are modular so that each can be explored, developed, or deployed independently, yet they all integrate to demonstrate the full lifecycle of secure AI engineering.</p>"},{"location":"narrative/platform_story/#documentation-and-learning-strategy","title":"Documentation and Learning Strategy","text":"<p>Documentation is a key part of this platform. Each module includes its own technical notes, security considerations, and implementation guides, written in a way that reflects real engineering processes. Over time, these will evolve into deeper guides, runbooks, and case studies.</p> <p>Alongside the technical documentation, narrative write-ups and social posts will share the learning journey, design decisions, and practical lessons from each stage. These posts will align with milestones, for example, completing a module or demonstrating a new capability.</p>"},{"location":"narrative/platform_story/#runtime-options-docker-compose-and-kubernetes","title":"Runtime Options: Docker Compose and Kubernetes","text":"<p>The platform supports two local runtime options:</p> <ul> <li>Docker Compose (default): Fastest way to run everything on one machine. Recommended for development and demos.</li> <li>Kubernetes (optional): Used selectively for supporting infrastructure and lightweight services (dashboards, web UIs, proxies, collectors). This helps practice real-world deployment patterns (namespaces, RBAC, network policies) without moving GPU-heavy model workloads into the cluster.</li> </ul> <p>Hardware Constraints</p> <p>AI model training and inference will not run in Kubernetes in this project due to hardware constraints. Models run locally or in containers outside the cluster. K8s is used to host peripheral services like Grafana, Loki, Caddy, MLflow UI, or the OTel collector where appropriate. In my specific environment, I have a dedicated gaming workstation which can handle these workloads.</p>"},{"location":"narrative/platform_story/#navigating-the-platform","title":"Navigating the Platform","text":"<p>Start with the <code>sai-platform-meta</code> repository to understand the architecture, roadmap, and documentation structure.</p> <p>Visit each module repository to see its specific purpose and implementation. You'll find a <code>README.md</code> file to get started. Each README will contain quickstart steps, goals, and references related to modules.</p> <p>Follow the documentation folders (<code>/docs/</code>) within the <code>sai-platform-meta</code> repo for technical details, and the <code>/narrative/</code> folder for story-based updates.</p>"},{"location":"narrative/platform_story/#module-1-platform-infrastructure","title":"Module 1 - Platform Infrastructure","text":"<p>The Platform Infrastructure module provides the foundation for the entire system. It contains the core services that everything else depends on: secrets management, logging, monitoring, and proxying.</p> <p>Use open-source tools in containers to simulate a production environment. Docker Compose is the default deployment mechanism, useful for quickly deploying in development. Kubernetes is optionally used to deploy lightweight services (Grafana/Loki dashboards, OTel collector, MLflow UI, Caddy) to practice cluster concepts such as namespaces, service accounts, and network policies. Kubernetes is perfect for production simulation and running services for lab use. Models do not run in the cluster.</p>"},{"location":"narrative/platform_story/#technologies-and-implementation","title":"Technologies and Implementation","text":"<ul> <li>Vault: Secure storage for API keys, tokens, and credentials.</li> <li>Caddy: Local web server and reverse proxy.</li> <li>Grafana and Loki: Dashboards and logs for system visibility.</li> <li>OpenTelemetry: Collects metrics and traces from services.</li> <li>Docker Compose: Defines, runs, and manages all local containers.</li> <li>Kubernetes: Defines, runs, and manages all production simulated containers.</li> </ul>"},{"location":"narrative/platform_story/#high-level-steps","title":"High-Level Steps","text":"<p>Compose path (default):</p> <ol> <li>Start local infrastructure with <code>make up</code>.</li> <li>Enable profiles for observability, secrets, or registry.</li> <li>Use Vault to store credentials safely.</li> <li>View logs and metrics in Grafana.</li> <li>Expand or tear down the environment as needed.</li> </ol> <p>Kubernetes path (optional):</p> <ol> <li>Create a local cluster (e.g., <code>kind</code> or <code>k3d</code>).</li> <li>Apply base manifests/overlays for Grafana, Loki, OTel, MLflow UI, or Caddy.</li> <li>Use port-forward or Ingress to access web UIs.</li> <li>Keep models running outside K8s; only UIs/collectors/proxies run in the cluster.</li> </ol>"},{"location":"narrative/platform_story/#module-2-ml-foundations","title":"Module 2 - ML Foundations","text":"<p>The ML (Machine Learning) Foundations module is where models are built and trained. It demonstrates how data and code flow together to produce machine learning models that can be reused and served securely.</p> <p>The focus is on reproducibility and responsible model development. Each experiment is tracked, and datasets include documentation on where the data came from and how it can be used.</p>"},{"location":"narrative/platform_story/#technologies-and-implementation_1","title":"Technologies and Implementation","text":"<ul> <li>PyTorch and scikit-learn: Core frameworks for model training and evaluation.</li> <li>MLflow: Tracks experiments, metrics, and artifacts.</li> <li>Python CLI: Runs training and evaluation pipelines.</li> <li>Data Cards: Document dataset provenance and licensing.</li> </ul>"},{"location":"narrative/platform_story/#high-level-steps_1","title":"High-Level Steps","text":"<ol> <li>Prepare data and preprocessing scripts.</li> <li>Train models using reproducible pipelines.</li> <li>Log results and artifacts to MLflow.</li> <li>Register the model for future serving.</li> </ol>"},{"location":"narrative/platform_story/#module-3-inference-api","title":"Module 3 - Inference API","text":"<p>The Inference API module provides a secure way to serve trained models. It exposes an HTTP API that accepts input, runs predictions, and returns results while enforcing authentication and authorization.</p> <p>All requests to the API are authenticated with JSON Web Tokens (JWT), and actions are restricted using role-based access control (RBAC). Every inference request is logged with a trace ID for auditing.</p>"},{"location":"narrative/platform_story/#technologies-and-implementation_2","title":"Technologies and Implementation","text":"<ul> <li>FastAPI: Lightweight web framework for building APIs.</li> <li>Pydantic: Input validation and type safety.</li> <li>JWT and RBAC: User authentication and permission enforcement.</li> <li>OpenTelemetry: Trace requests end-to-end.</li> </ul>"},{"location":"narrative/platform_story/#high-level-steps_2","title":"High-Level Steps","text":"<ol> <li>Load a trained model from the MLflow registry.</li> <li>Validate incoming requests and tokens.</li> <li>Run predictions and return results.</li> <li>Record latency and usage metrics.</li> </ol>"},{"location":"narrative/platform_story/#module-4-agent-secops","title":"Module 4 - Agent SecOps","text":"<p>The Agent SecOps module focuses on AI agents, automations built using large language models (LLMs). It explores how to control what agents can do, what data they can access, and how to audit their behavior.</p> <p>Each agent operates under a defined set of tools and permissions. Prompts and outputs are filtered for sensitive content, and every action is logged. Secrets are injected securely from Vault instead of stored locally.</p>"},{"location":"narrative/platform_story/#technologies-and-implementation_3","title":"Technologies and Implementation","text":"<ul> <li>LangChain: Framework for building language-based agents.</li> <li>FastAPI: Provides an API interface for agent tasks.</li> <li>Vault: Supplies short-lived secrets.</li> <li>Guardrails / Regex Filters: Protect against prompt injections and data leaks.</li> <li>Audit Logging: Tracks prompt, tool, and output data.</li> </ul>"},{"location":"narrative/platform_story/#high-level-steps_3","title":"High-Level Steps","text":"<ol> <li>Define allowed tools and permissions.</li> <li>Create prompts and safety filters.</li> <li>Securely load secrets at runtime.</li> <li>Monitor agent activity and results.</li> </ol>"},{"location":"narrative/platform_story/#module-5-adversarial-lab","title":"Module 5 - Adversarial Lab","text":"<p>The Adversarial Lab module tests the security of AI systems by simulating attacks. This helps identify weaknesses in models and defenses before real attackers can exploit them.</p> <p>Tests include adversarial inputs, data poisoning, and prompt injection attempts. Results are measured, recorded, and compared to baselines to show how defenses perform.</p>"},{"location":"narrative/platform_story/#technologies-and-implementation_4","title":"Technologies and Implementation","text":"<ul> <li>Adversarial Robustness Toolbox (ART): Generates model attacks.</li> <li>LangChain Red Team Tools: Tests agent vulnerabilities.</li> <li>Python and PyTorch: Custom scripts for experiments.</li> </ul>"},{"location":"narrative/platform_story/#high-level-steps_4","title":"High-Level Steps","text":"<ol> <li>Select a target model or agent.</li> <li>Run configured attack scenarios.</li> <li>Capture and evaluate results.</li> <li>Adjust defenses and retest.</li> </ol>"},{"location":"narrative/platform_story/#module-6-mlops-pipeline","title":"Module 6 \u2013 MLOps Pipeline","text":"<p>The MLOps Pipeline module ties everything together with automation. It manages continuous integration (CI) and continuous delivery (CD) pipelines that check, scan, and release code securely.</p> <p>Automate security and compliance checks for every change. Pipelines can target Compose deployments for quick smoke tests and Kubernetes overlays for environment-style testing of lightweight services (dashboards, proxies, collectors). GPU-heavy model jobs are excluded from K8s in this project and will be run on a dedicated workstation. The documentation may target my specific environment.</p>"},{"location":"narrative/platform_story/#technologies-and-implementation_5","title":"Technologies and Implementation","text":"<ul> <li>GitHub Actions: Automates builds, tests, and deployments.</li> <li>Trivy and Syft: Scan images and create software bills of materials (SBOMs).</li> <li>Cosign: Signs and verifies releases.</li> <li>Open Policy Agent (OPA): Defines and enforces security policies.</li> </ul>"},{"location":"narrative/platform_story/#high-level-steps_5","title":"High-Level Steps","text":"<ol> <li>Run tests and code quality checks.</li> <li>Generate SBOMs for transparency.</li> <li>Scan dependencies for vulnerabilities.</li> <li>Sign and publish verified releases.</li> </ol>"},{"location":"narrative/platform_story/#glossary","title":"Glossary","text":"<p>AI Agent: A program that uses language models or AI logic to complete complex tasks automatically.</p> <p>Adversarial Attack: A method of tricking AI systems with carefully crafted inputs.</p> <p>Audit Logging: Recording detailed information about system actions for review.</p> <p>Docker Compose: A tool for defining and running multi-container Docker applications.</p> <p>FastAPI: A framework for building high-performance APIs in Python.</p> <p>LangChain: A framework for building applications powered by language models.</p> <p>Machine Learning (ML): A field of AI that enables computers to learn from data.</p> <p>MLOps: Practices for managing machine learning lifecycle processes such as training, deployment, and monitoring.</p> <p>OpenTelemetry (OTel): A standard for collecting logs, metrics, and traces from systems.</p> <p>RBAC: Role-Based Access Control, used to restrict actions to specific users or roles.</p> <p>Vault: A secrets management system that stores and protects sensitive data.</p> <p>This document serves as the accessible guide for the Secure AI Platform, a project that brings together security, operations, and artificial intelligence into one cohesive, educational framework.</p> <p>It explains not just what is being built, but why each component matters, and how every piece contributes to a secure, observable, and reproducible AI environment. The intention is to make this platform understandable to anyone curious about how AI systems can be responsibly engineered and secured from the ground up.</p>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/","title":"Repo Story - <code>sai-platform-meta</code>","text":"<p>The <code>sai-platform-meta</code> repository acts as the foundation and coordination layer for the entire Secure AI Platform. It contains the program\u2019s documentation, standards, templates, and shared assets used by all other modules.</p> <p>This repository does not host application code \u2014 instead, it defines how the platform works, how it\u2019s governed, and how it\u2019s built. In production terms, this is the platform\u2019s source of truth for documentation, security policies, and CI/CD templates.</p>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/#summary","title":"Summary","text":"<p>The <code>sai-platform-meta</code> repository provides:</p> <ul> <li>Documentation &amp; Architecture</li> <li>All platform-level specifications, diagrams, and whitepapers.</li> <li>Reference architectures and security threat models.</li> <li>Governance</li> <li>Templates and baselines for code quality, repository standards, and contribution guidelines.</li> <li>Shared <code>.github/</code> workflows for security scanning, dependency updates, and changelog generation.</li> <li>Engineering Utilities</li> <li>Developer setup scripts, Make targets, and pre-commit hooks used across repositories.</li> <li>Narrative &amp; Writing</li> <li>Plain-language and technical documentation for public sharing (like this narrative).</li> </ul> <p>In short, this repository defines the way every other Secure AI Platform module is built, documented, and operated.</p>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/#scaffold","title":"Scaffold","text":"<p>A simplified structure of this repository:</p> <pre><code>sai-platform-meta/\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 workflows/             # Shared CI/CD templates for other repos\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/        # (Optional) Issue and PR templates\n\u2502   \u2514\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u2502\n\u251c\u2500\u2500 .dev/\n\u2502   \u251c\u2500\u2500 hooks/                 # Pre-commit hooks and development helpers\n\u2502   \u2514\u2500\u2500 lint/                  # Configuration for ruff, black, mypy, etc.\n\u2502\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 architecture/          # Diagrams, platform blueprints, and specs\n\u2502   \u2502   \u251c\u2500\u2500 PLATFORM_OVERVIEW.md\n\u2502   \u2502   \u2514\u2500\u2500 architecture-diagram.mmd\n\u2502   \u251c\u2500\u2500 narrative/             # Public-facing project narratives\n\u2502   \u2502   \u251c\u2500\u2500 PLATFORM_STORY.md\n\u2502   \u2502   \u2514\u2500\u2500 REPO_STORY.md\n\u2502   \u2514\u2500\u2500 tech/                  # Internal technical references and deep dives\n\u2502\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 make_init.sh           # Bootstrap dev environment\n\u2502   \u2514\u2500\u2500 sync_workflows.sh      # Sync shared GitHub workflows to other repos\n\u2502\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md                  # Repository overview, badges, and links\n\u2514\u2500\u2500 Makefile                   # High-level commands for setup and sync\n</code></pre>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/#folder-notes","title":"Folder Notes","text":"<ul> <li><code>.github/</code></li> <li>Centralized automation hub.     Includes reusable workflows for linting, scanning, and dependency checks.</li> <li> <p>Templates for issues and PRs standardize the contribution process across all repositories.</p> </li> <li> <p><code>.dev/</code></p> </li> <li>Local development configuration \u2014 hooks, code style tools, and environment setup.</li> <li> <p>Ensures consistency when working across different modules.</p> </li> <li> <p><code>docs/</code></p> </li> <li>The documentation backbone of the project.</li> <li> <p>Split into:</p> <ul> <li><code>architecture/</code>: high-level technical structure and specifications.</li> <li><code>narrative/</code>: layman-readable project explanations and blog-ready stories.</li> <li><code>tech/</code>: deeper implementation notes or security deep dives.</li> </ul> </li> <li> <p><code>scripts/</code></p> </li> <li>Utility scripts to set up developer environments, synchronize CI/CD templates, or bootstrap other repos.</li> <li> <p>These scripts are referenced from the <code>Makefile</code> for easy execution.</p> </li> <li> <p><code>Makefile</code></p> </li> <li>Provides short, memorable commands to automate tasks like:<ul> <li><code>make setup</code> \u2192 Initialize the dev environment.</li> <li><code>make sync</code> \u2192 Push shared workflows to other repositories.</li> <li><code>make docs</code> \u2192 Build or preview documentation.</li> </ul> </li> </ul>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/#other-relevant-information","title":"Other Relevant Information","text":""},{"location":"narrative/sai-platform-meta/MODULE_STORY/#usage-across-the-platform","title":"Usage Across the Platform","text":"<p>All other Secure AI Platform repositories reference this repo for shared standards. For example: - The ML Foundations repo uses the pre-commit and lint configs from <code>.dev/</code>. - The Inference API repo imports the shared CI/CD workflows from <code>.github/workflows/</code>. - The Adversarial Lab repo inherits security scanning workflows for container builds.</p>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/#documentation-strategy","title":"Documentation Strategy","text":"<p>Each document in this repo is designed to support both internal development and public presentation: - Architecture docs \u2192 for engineers and contributors. - Narrative docs \u2192 for blog readers and hiring managers. - Technical deep dives \u2192 for future whitepapers or research publications.</p>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/#maintenance-versioning","title":"Maintenance &amp; Versioning","text":"<ul> <li>Each update or new capability in the platform should include corresponding updates here:</li> <li>Diagrams in <code>docs/architecture</code></li> <li>Narratives in <code>docs/narrative</code></li> <li>CI/CD templates in <code>.github/workflows</code></li> <li>Changes should be tagged using semantic versioning (<code>vX.Y.Z</code>).</li> <li>The repository itself may issue changelog entries (even though it has no runtime code) to reflect new standards, templates, or documentation updates.</li> </ul>"},{"location":"narrative/sai-platform-meta/MODULE_STORY/#future-additions","title":"Future Additions","text":"<p>Planned extensions for <code>sai-platform-meta</code> include: - MkDocs or Docusaurus site generation for publishing all documentation. - Centralized policy definitions (OPA or YAML schemas) for consistency across CI/CD pipelines. - Architecture blueprints exported as versioned documents for external readers.</p> <p>In short: The <code>sai-platform-meta</code> repository is the command center of the Secure AI Platform \u2014 defining the standards, structures, and documentation that unify every module into a coherent, secure, and maintainable system.</p>"},{"location":"narrative/sai-platform-meta/module_story/","title":"Repo Story - <code>sai-platform-meta</code>","text":"<p>The <code>sai-platform-meta</code> repository acts as the foundation and coordination layer for the entire Secure AI Platform. It contains the program\u2019s documentation, standards, templates, and shared assets used by all other modules.</p> <p>This repository does not host application code \u2014 instead, it defines how the platform works, how it\u2019s governed, and how it\u2019s built. In production terms, this is the platform\u2019s source of truth for documentation, security policies, and CI/CD templates.</p>"},{"location":"narrative/sai-platform-meta/module_story/#summary","title":"Summary","text":"<p>The <code>sai-platform-meta</code> repository provides:</p> <ul> <li>Documentation &amp; Architecture</li> <li>All platform-level specifications, diagrams, and whitepapers.</li> <li>Reference architectures and security threat models.</li> <li>Governance</li> <li>Templates and baselines for code quality, repository standards, and contribution guidelines.</li> <li>Shared <code>.github/</code> workflows for security scanning, dependency updates, and changelog generation.</li> <li>Engineering Utilities</li> <li>Developer setup scripts, Make targets, and pre-commit hooks used across repositories.</li> <li>Narrative &amp; Writing</li> <li>Plain-language and technical documentation for public sharing (like this narrative).</li> </ul> <p>In short, this repository defines the way every other Secure AI Platform module is built, documented, and operated.</p>"},{"location":"narrative/sai-platform-meta/module_story/#scaffold","title":"Scaffold","text":"<p>A simplified structure of this repository:</p> <pre><code>sai-platform-meta/\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 workflows/             # Shared CI/CD templates for other repos\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/        # (Optional) Issue and PR templates\n\u2502   \u2514\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u2502\n\u251c\u2500\u2500 .dev/\n\u2502   \u251c\u2500\u2500 hooks/                 # Pre-commit hooks and development helpers\n\u2502   \u2514\u2500\u2500 lint/                  # Configuration for ruff, black, mypy, etc.\n\u2502\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 architecture/          # Diagrams, platform blueprints, and specs\n\u2502   \u2502   \u251c\u2500\u2500 PLATFORM_OVERVIEW.md\n\u2502   \u2502   \u2514\u2500\u2500 architecture-diagram.mmd\n\u2502   \u251c\u2500\u2500 narrative/             # Public-facing project narratives\n\u2502   \u2502   \u251c\u2500\u2500 PLATFORM_STORY.md\n\u2502   \u2502   \u2514\u2500\u2500 REPO_STORY.md\n\u2502   \u2514\u2500\u2500 tech/                  # Internal technical references and deep dives\n\u2502\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 make_init.sh           # Bootstrap dev environment\n\u2502   \u2514\u2500\u2500 sync_workflows.sh      # Sync shared GitHub workflows to other repos\n\u2502\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md                  # Repository overview, badges, and links\n\u2514\u2500\u2500 Makefile                   # High-level commands for setup and sync\n</code></pre>"},{"location":"narrative/sai-platform-meta/module_story/#folder-notes","title":"Folder Notes","text":"<ul> <li><code>.github/</code></li> <li>Centralized automation hub.     Includes reusable workflows for linting, scanning, and dependency checks.</li> <li> <p>Templates for issues and PRs standardize the contribution process across all repositories.</p> </li> <li> <p><code>.dev/</code></p> </li> <li>Local development configuration \u2014 hooks, code style tools, and environment setup.</li> <li> <p>Ensures consistency when working across different modules.</p> </li> <li> <p><code>docs/</code></p> </li> <li>The documentation backbone of the project.</li> <li> <p>Split into:</p> <ul> <li><code>architecture/</code>: high-level technical structure and specifications.</li> <li><code>narrative/</code>: layman-readable project explanations and blog-ready stories.</li> <li><code>tech/</code>: deeper implementation notes or security deep dives.</li> </ul> </li> <li> <p><code>scripts/</code></p> </li> <li>Utility scripts to set up developer environments, synchronize CI/CD templates, or bootstrap other repos.</li> <li> <p>These scripts are referenced from the <code>Makefile</code> for easy execution.</p> </li> <li> <p><code>Makefile</code></p> </li> <li>Provides short, memorable commands to automate tasks like:<ul> <li><code>make setup</code> \u2192 Initialize the dev environment.</li> <li><code>make sync</code> \u2192 Push shared workflows to other repositories.</li> <li><code>make docs</code> \u2192 Build or preview documentation.</li> </ul> </li> </ul>"},{"location":"narrative/sai-platform-meta/module_story/#other-relevant-information","title":"Other Relevant Information","text":""},{"location":"narrative/sai-platform-meta/module_story/#usage-across-the-platform","title":"Usage Across the Platform","text":"<p>All other Secure AI Platform repositories reference this repo for shared standards. For example: - The ML Foundations repo uses the pre-commit and lint configs from <code>.dev/</code>. - The Inference API repo imports the shared CI/CD workflows from <code>.github/workflows/</code>. - The Adversarial Lab repo inherits security scanning workflows for container builds.</p>"},{"location":"narrative/sai-platform-meta/module_story/#documentation-strategy","title":"Documentation Strategy","text":"<p>Each document in this repo is designed to support both internal development and public presentation: - Architecture docs \u2192 for engineers and contributors. - Narrative docs \u2192 for blog readers and hiring managers. - Technical deep dives \u2192 for future whitepapers or research publications.</p>"},{"location":"narrative/sai-platform-meta/module_story/#maintenance-versioning","title":"Maintenance &amp; Versioning","text":"<ul> <li>Each update or new capability in the platform should include corresponding updates here:</li> <li>Diagrams in <code>docs/architecture</code></li> <li>Narratives in <code>docs/narrative</code></li> <li>CI/CD templates in <code>.github/workflows</code></li> <li>Changes should be tagged using semantic versioning (<code>vX.Y.Z</code>).</li> <li>The repository itself may issue changelog entries (even though it has no runtime code) to reflect new standards, templates, or documentation updates.</li> </ul>"},{"location":"narrative/sai-platform-meta/module_story/#future-additions","title":"Future Additions","text":"<p>Planned extensions for <code>sai-platform-meta</code> include: - MkDocs or Docusaurus site generation for publishing all documentation. - Centralized policy definitions (OPA or YAML schemas) for consistency across CI/CD pipelines. - Architecture blueprints exported as versioned documents for external readers.</p> <p>In short: The <code>sai-platform-meta</code> repository is the command center of the Secure AI Platform \u2014 defining the standards, structures, and documentation that unify every module into a coherent, secure, and maintainable system.</p>"},{"location":"tech/","title":"Tech Placeholder","text":""}]}